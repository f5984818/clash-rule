# 注意规则在满足自己需求情况下，尽量做到精简，不要过度复杂，以免影响性能。
# 錨点，将需要反复书写的配置设为錨点，在需要的地方引用
# 注意锚点必须放在引用的上方，可以集中把锚点全部放yaml的顶部。

p: &p # 订阅类型，更新间隔，健康检查配置
  {type: http, interval: 86400, proxy: 直连, health-check: {enable: true, url: https://www.gstatic.com/generate_204, interval: 3600, timeout: 5000, lazy: true}, override: {skip-cert-verify: ture}}
q: &q # 订阅类型，更新间隔，健康检查配置
  {type: http, interval: 86400, proxy: ♻️ 高速机场, health-check: {enable: true, url: https://www.gstatic.com/generate_204, interval: 3600, timeout: 5000, lazy: true}, override: {skip-cert-verify: ture}}

# 机场订阅
g: &g # 高速机场
  type: url-test
  use:
    - 🛫 三分
  exclude-filter: "套餐|流量|群组|频道|官网|推荐使用|测试|电报|订阅" #排除满足关键词或正则表达式的节点
  exclude-type: "http" #排除指定类型的节点，不支持正则表达式，通过 | 分割
  
z: &z # 中转机场
  type: url-test
  use:
    - 🛫 哈基米-中转
  exclude-filter: "套餐|流量|群组|频道|官网|推荐使用|测试|电报|订阅" #排除满足关键词或正则表达式的节点
  exclude-type: "http" #排除指定类型的节点，不支持正则表达式，通过 | 分割
  
b: &b  # 白嫖机场
  type: url-test
  use:
    - 🛫 godfather216
    - 🛫 分享社ripaojiedian
    - 🛫 一个机场
    - 🛫 CF-Workers-SUB
    - 🛫 特价机场
  exclude-filter: "套餐|流量|群组|频道|官网|推荐使用|测试|电报|订阅" #排除满足关键词或正则表达式的节点
  exclude-type: "http" #排除指定类型的节点，不支持正则表达式，通过 | 分割
proxy-providers:
# 机场订阅
# override 覆写节点内容；additional-prefix：为节点名称添加固定前缀；additional-suffix：为节点名称添加固定后缀
# 高速机场
  🛫 三分: {<<: *p, url: "http://103.150.11.56:12321/api/v1/client/subscribe?token=d75158e0b5015c85fd8c1acb6d27c8e3&flag=clashmeta", path: ./机场/gaosu.yaml, override: {additional-prefix: "三分 | "}}
  
# 中转机场
  🛫 哈基米-中转: {<<: *p, url: "http://em7.buzz/v3/subscr?id=ab128cb6b7c74ec48b2ab3766983da0e", path: ./机场/zhongzhuan.yaml, override: {additional-prefix: "哈基米-中转 | "}}
  
# 白嫖机场
  🛫 godfather216: {<<: *p, url: "https://raw.githubusercontent.com/godfather216/telegram/main/dizhu1.yaml", path: ./机场/baipiao.yaml, override: {additional-prefix: "godfather216 | "}}
  🛫 分享社ripaojiedian: {<<: *q, url: "https://raw.githubusercontent.com/ripaojiedian/freenode/main/clash", path: ./机场/baipiao.yaml, override: {additional-prefix: "分享社ripaojiedian | "}}
  🛫 一个机场: {<<: *p, url: "https://sub.xn--4gqvd492adjr.com/s/2d7adafbde72e941fa407eea0a928d80", path: ./机场/baipiao.yaml, override: {additional-prefix: "一个机场 | "}}
  🛫 CF-Workers-SUB: {<<: *p, url: "https://sub.nfsn666.eu.org/nfsn666", path: ./机场/baipiao.yaml, override: {additional-prefix: "CF-Workers-SUB | "}}
  🛫 特价机场: {<<: *p, url: "https://sub123.71345.xyz/api/v1/client/subscribe?token=1d73eb21795d2cf86595b7f9161f266f", path: ./机场/baipiao.yaml, override: {additional-prefix: "特价机场| "}}

# 节点信息
proxies:
  - {name: 直连, type: direct}

# 全局配置 
port: 7890 # HTTP(S) 代理端口
socks-port: 7891 # SOCKS5 代理端口
redir-port: 7892 # redirect 透明代理端口，仅能代理 TCP 流量，仅适用于 Linux 以及 macOS 使用
mixed-port: 7893 # HTTP(S) 和 SOCKS 代理混合端口
tproxy-port: 7894 # tproxy 透明代理端口，可以代理 TCP 以及 UDP 流量，仅限 linux 适用 (Android 设备属于 Linux 设备）
allow-lan: true # 允许局域网内其他设备经过 Clash 的代理端口访问互联网，可选值 true/false
mode: rule # 运行模式：rule 规则匹配；global 全局代理(需要在GLOBAL策略组选择代理/策略)；direct 全局直连
bind-address: "*" # 绑定 IP, 通过 LAN 访问一个/一些特定的 IP 地址，"*" 绑定所有 IP 地址，默认值，不填写此项则绑定全部
ipv6: false # 是否允许内核接受 IPv6 流量，可选值 true/false
unified-delay: true # 统一延迟，更换延迟计算方式,去除握手等额外延迟 可选值 true/false
tcp-concurrent: true # tcp并发，允许同时处理多个tcp连接，可选值 true/false
log-level: warning # 日志级别：silent 静默，不输出；error 仅输出发生错误至无法使用的日志；warning 输出发生错误但不影响运行的日志，以及 error 级别内容；info 输出一般运行的内容，以及 error 和 warning 级别的日志；debug 尽可能的输出运行中所有的信息
find-process-mode: 'off' # 进程匹配模式：always 开启，强制匹配所有进程；；strict 默认，由 Clash 判断是否开启；off 不匹配进程，推荐在路由器上使用此模式
# interface-name: en0
global-client-fingerprint: chrome # 全局客户端指纹，可选："chrome", "firefox", "safari", "iOS", "android", "edge", "360"," qq", "random"；若选择 "random", 则按 Cloudflare Radar 数据按概率生成一个现代浏览器指纹。
global-ua: clash.mate # 自定义外部资源下载时使用的UA,默认为 clash.meta
keep-alive-idle: 600
keep-alive-interval: 15 # TCP Keep Alive 间隔,单位分钟 | 控制 Clash 发出 TCP Keep Alive 包的间隔,减少移动设备耗电问题的临时措施
disable-keep-alive: false
profile: # 缓存
  store-selected: true # 储存 API 对策略组的选择，以供下次启动时使用
  store-fake-ip: true # 储存 fakeip 映射表，域名再次发生连接时，使用原有映射地址

# 控制面板
external-controller: 0.0.0.0:9090 # 外部控制器，可以使用 RESTful API 来控制你的 Clash 内核；API 监听地址，你可以将 127.0.0.1 修改为 0.0.0.0 来监听所有 IP；访问地址：http://127.0.0.1:9090
secret: "" # API 的访问密钥
external-ui: "/etc/mihomo/run/ui" # 外部用户界面路径，可以为绝对路径，或者 Clash 工作目录的相对路径
external-ui-name: zashboard # 自定义外部用户界面名字
external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip" # 自定义外部用户界面下载地址 # API 的访问密钥

# 嗅探
sniffer: # 域名嗅器,通过读取握手包内的域名字段,将IP还原成域名,有效解决Mapping机制的短板
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true # 可覆盖 sniffer.override-destination
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain: # 需要强制嗅探的域名（默认情况下只对IP进行嗅探
    - "+.v2ex.com"
  skip-domain: # 需要跳过嗅探的域名。主要解决部分站点sni字段非域名，导致嗅探结果异常的问题，如米家设备
    - "rule-set:private_domain,cn_domain"

# 入站  
tun:
  enable: true # 是否启用,可选 true/false
  stack: mixed # tun 模式堆栈，如无使用问题，建议使用 mixed栈，默认 gvisor，可用值： system/gvisor/mixed
  dns-hijack: ["any:53", "tcp://any:53"] # dns 劫持，将匹配到的连接导入内部 dns 模块，不书写协议则为 udp://
  auto-route: true # 自动设置全局路由,可以自动将全局流量路由进入 tun 网卡
  auto-redirect: true
  auto-detect-interface: true # 自动选择流量出口接口,多出口网卡同时连接的设备建议手动指定出口网卡

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter: #fakeip 过滤，以下地址不会下发 fakeip 映射用于连接
    - "rule-set:private_domain,cn_domain"
    - "+.services.googleapis.cn"
    - "+.xn--ngstr-lra8j.com"
    - "time.*.com"
    - "+.pool.ntp.org"
    - "+.ntp.tencent.com"
    - "+.ntp1.aliyun.com"
    - "+.ntp.ntsc.ac.cn"
    - "+.cn.ntp.org.cn"
  default-nameserver: #默认 DNS, 用于解析 DNS 服务器 的域名，必须为 IP, 可为加密 DNS
    - 219.147.1.66
    - 219.146.1.66
    - 223.5.5.5
    - 119.29.29.29
  proxy-server-nameserver: #代理节点域名解析服务器，仅用于解析代理节点的域名
    - https://223.5.5.5/dns-query
    - 223.5.5.5
    - 119.29.29.29
  nameserver-policy: ##指定域名查询的解析服务器，优先于 nameserver/fallback 查询
      "geosite:cn,private":
      - 'https://1.12.12.12/dns-query'
      - 'https://223.5.5.5/dns-query'
      - 'https://[2400:3200::1]/dns-query'
      - 'https://[2402:4e00::]/dns-query'
  # namesever尽量用运营商提供的DNS
  nameserver: #默认的域名解析服务器，如不配置 fallback/proxy-server-nameserver , 则所有域名都由 nameserver 解析
    - 219.147.1.66
    - 219.146.1.66
    - 223.5.5.5
    - 119.29.29.29
 
# 出站策略

# 策略组
pr: &pr {type: select, proxies: [🚀 默认代理, ♻️ 白嫖机场, ♻️ 高速机场, ♻️ 中转机场, ♻️ 香港自动, ♻️ 日本自动, ♻️ 美国自动, ♻️ 自动选择, 🌐 全部节点, 直连]}
proxy-groups: #代理组
  - {name: 🚀 默认代理, type: select, proxies: [ ♻️ 白嫖机场, ♻️ 高速机场, ♻️ 中转机场, ♻️ 香港自动, ♻️ 日本自动, ♻️ 美国自动, ♻️ 自动选择, 🌐 全部节点, 直连]}

# 应用分流
#  - {name: 🛡IP属地, <<: *pr}
  - {name: 📹 YouTube, <<: *pr}
  - {name: 🍀 Google, <<: *pr}
  - {name: 🤖 ChatGPT, <<: *pr}
  - {name: 👨🏿‍💻 GitHub, <<: *pr}
  - {name: 🐬 OneDrive, <<: *pr}
  - {name: 🪟 Microsoft, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: 🎵 TikTok, <<: *pr}
  - {name: 📲 Telegram, <<: *pr}
#  - {name: 🎥 NETFLIX, <<: *pr}
  - {name: ✈️ Speedtest, <<: *pr}
  - {name: 💶 PayPal, <<: *pr}
  - {name: 🍎 Apple, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: 🎯 直连, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: 🐟 漏网之鱼, <<: *pr}

# 模式选择
  - {name: ♻️ 白嫖机场, <<: *b, type: url-test, tolerance: 20, interval: 300, filter: "^((?!(直连)).)*$"}
  - {name: ♻️ 高速机场, <<: *g, type: url-test, tolerance: 20, interval: 300, filter: "^((?!(直连)).)*$"}
  - {name: ♻️ 中转机场, <<: *z, type: url-test, tolerance: 20, interval: 300, filter: "^((?!(直连)).)*$"}
  - {name: ♻️ 香港自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  - {name: ♻️ 日本自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$" }
  - {name: ♻️ 美国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$"}
  - {name: ♻️ 自动选择, <<: *b, type: url-test, tolerance: 20, interval: 300, filter: "^((?!(直连)).)*$"}
  - {name: 🌐 全部节点, <<: *b, type: select}

# 规则匹配
# 此规则部分没有做防泄露处理，因为弊严重大于利！
rules:
  - DOMAIN-SUFFIX,qichiyu.com,🚀 默认代理
  - RULE-SET,private_domain,直连
  - RULE-SET,Direct,直连
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,proxylite,🚀 默认代理
  - RULE-SET,ai,🤖 ChatGPT
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,microsoft_domain,🪟 Microsoft
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
#  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,paypal_domain,💶 PayPal
  - RULE-SET,gfw_domain,🚀 默认代理
  - RULE-SET,geolocation-!cn,🚀 默认代理
  - RULE-SET,cn_domain,🎯 直连
  - RULE-SET,google_ip,🍀 Google,no-resolve
#  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,🎯 直连
  - MATCH,🐟 漏网之鱼

# 规则集
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
rule-providers: 
  Direct: { <<: *class, url: "https://raw.githubusercontent.com/f5984818/clash-rule/refs/heads/main/Direct.list"}
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  proxylite: { <<: *class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/master/ProxyLite.list"}
  ai: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
#  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
#  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}